!function(){"use strict";class e{constructor(e,t,s){let{name:r,link:n}=e;this._name=r,this._link=n,this._cardSelector=t,this._handleCardClick=s}_setEventListeners(){this._cardElement.querySelector(".card__like-button").addEventListener("click",(()=>this._handeLikeIcon())),this._cardElement.querySelector(".card__delete-button").addEventListener("click",(()=>this._handleDeleteCard())),this._cardImageEl.addEventListener("click",(()=>this._handleCardClick(this._name,this._link)))}_handeLikeIcon(){this._cardElement.querySelector(".card__like-button").classList.toggle("card__like-button_active")}_handleDeleteCard(){this._cardElement.remove(),this._cardElement=null}getView(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._cardImageEl=this._cardElement.querySelector(".card__image"),this._cardTitleEl=this._cardElement.querySelector(".card__title"),this._cardImageEl.src=this._link,this._cardTitleEl.textContent=this._name,this._cardImageEl.alt=this._name,this._setEventListeners(),this._cardElement}}class t{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t}_setEventListeners(){this._inputEls=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._submitButton=this._formElement.querySelector(this._submitButtonSelector),this._inputEls.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState(this._inputEls)}))}))}_checkInputValidity(e){if(!e.validity.valid)return this._showInputError(e,e.validationMessage);this._hideInputError(e)}_showInputError(e,t){const s=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),s.textContent=t,s.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent=" ",t.classList.remove(this._errorClass)}_toggleButtonState(e){this._hasInvalidInput(e)?this.disableButton():this._enableButton()}disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_enableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}_hasInvalidInput(e){return!e.every((e=>e.validity.valid))}_showInputError(e,t){const s=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),s.textContent=e.validationMessage,s.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent=" ",t.classList.remove(this._errorClass)}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class s{constructor(e){let{popupSelector:t}=e;this._popupElement=document.querySelector(t)}open(){this._popupElement.classList.add("modal_open"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popupElement.classList.remove("modal_open"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&(this.close(),console.log("escape key"))}_cardClickClose(e){e.target.classList.contains("modal_open")&&this.close()}setEventListeners(){this._closeButton=this._popupElement.querySelector(".modal__close"),this._closeButton.addEventListener("click",(()=>{this.close()})),this._popupElement.addEventListener("click",(e=>{this._cardClickClose(e)}))}}class r extends s{constructor(e,t){super({popupSelector:e}),this._popupForm=this._popupElement.querySelector(".modal__form"),this._handleFormSubmit=t,this._inputEls=Array.from(this._popupForm.querySelectorAll(".modal__input"))}close(){this._popupForm.reset(),super.close()}_getInputValues(){const e=[];this._inputEls.forEach((t=>(e[t.name]=t.value,e)))}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault();const t=this._getInputValues();this._handleFormSubmit(t)}))}}document.querySelector("#card-template").content.firstElementChild;const n=document.querySelector("#edit-modal"),o=document.querySelector("#add-card-modal"),i=n.querySelector(".modal__form"),a=o.querySelector(".modal__form"),l=document.querySelector("#card-image-modal"),c=document.querySelector("#profile-edit-button"),u=n.querySelector(".modal__close"),d=o.querySelector(".modal__close"),_=document.querySelector(".profile__add-button"),m=(l.querySelector(".modal__close"),a.querySelector("#card-name-input")),p=a.querySelector("#card-link-input"),h=(document.querySelector(".cards__list"),document.querySelector(".modal__image"),document.querySelector(".modal__caption"),{formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"}),E=new t(h,i),v=new t(h,a);function S(t){return new e(t,"#card-template",I).getView()}E.enableValidation(),v.enableValidation(),E.disableButton(),v.disableButton();const y=document.querySelector(".profile__name"),C=document.querySelector(".profile__description"),L=document.querySelector("#profile-name-input"),f=document.querySelector("#profile-description-input"),g=new class{constructor(e,t){this._userName=e,this._userJob=t}getUserInfo(){return{name:this._userName.textContent,job:this._userJob.textContent}}setUserInfo(e,t){this._userName.textContent=e,this._userJob.textContent=t}}(y,C);c.addEventListener("click",(()=>{B.open();const e=g.getUserInfo();L.value=e.name,f.value=e.job}));const q=m.value,b=p.value;m.value,p.value;const k=new class{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._container=document.querySelector(t)}renderItems(e,t){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}({items:[{name:"Yosemite Valley",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/yosemite.jpg"},{name:"Lake Louise",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lake-louise.jpg"},{name:"Bald Mountain",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/bald-mountains.jpg"},{name:"Latemar",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/latemar.jpg"},{name:"Vanoise National Park",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/vanoise.jpg"},{name:"Lago di Braies",link:"https://practicum-content.s3.us-west-1.amazonaws.com/software-engineer/around-project/lago.jpg"}],renderer:e=>{const t=S(e);k.addItem(t)}},".cards__list");k.renderItems(),_.addEventListener("click",(()=>{j.open()})),d.addEventListener("click",(()=>{j.close()})),u.addEventListener("click",(()=>j.close()));const w=new class extends s{constructor(e,t){let{name:s,link:r}=e;super(t),this._popupElement=document.querySelector(t),this._popupImage=this._popupElement.querySelector(".modal__image"),this._popupCaption=this._popupElement.querySelector(".modal__caption")}open(e,t){this._popupImage.src=t,this._popupImage.alt=e,this._popupCaption.textContent=e,super.setEventListeners(),super.open()}close(){super.close()}}({name:q,link:b},"#card-image-modal");function I(e,t){return w.open(e,t)}w.setEventListeners();const B=new r("#edit-modal",(function(){g.setUserInfo(L.value,f.value),B.close()})),j=new r("#add-card-modal",function(e){const t=S(void 0);k.addItem(t),j.close()}());B.setEventListeners(),j.setEventListeners()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,