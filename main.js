!function(){"use strict";class e{constructor(e,t,s,r,n){this._name=e.name,this._link=e.link,this._id=e._id,this._isLiked=e.isLiked,this._cardSelector=t,this._handleCardClick=s,this._handleDeleteClick=r,this._handleLikeClick=n}_setEventListeners(){this._likebutton.addEventListener("click",(()=>this._handleLikeClick(this))),this._trashbutton.addEventListener("click",(()=>this._handleDeleteClick(this))),this._cardImageEl.addEventListener("click",(()=>this._handleCardClick(this._name,this._link)))}handleLikeIcon(){this._likebutton.classList.toggle("card__like-button_active")}_toggleLike(){this._isLiked?this._likebutton.classList.add("card__like-button_active"):this._likebutton.classList.remove("card__like-button_active")}handleDeleteCard(){this._cardElement.remove(),this._cardElement=null}getView(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._cardImageEl=this._cardElement.querySelector(".card__image"),this._cardTitleEl=this._cardElement.querySelector(".card__title"),this._likebutton=this._cardElement.querySelector(".card__like-button"),this._trashbutton=this._cardElement.querySelector(".card__delete-button"),this._cardImageEl.src=this._link,this._cardTitleEl.textContent=this._name,this._cardImageEl.alt=this._name,this._setEventListeners(),this._toggleLike(),this._cardElement}}class t{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._formElement=t}_setEventListeners(){this._inputEls=Array.from(this._formElement.querySelectorAll(this._inputSelector)),this._submitButton=this._formElement.querySelector(this._submitButtonSelector),this._inputEls.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this._toggleButtonState(this._inputEls)}))}))}_checkInputValidity(e){if(!e.validity.valid)return this._showInputError(e,e.validationMessage);this._hideInputError(e)}_showInputError(e,t){const s=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),s.textContent=t,s.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent=" ",t.classList.remove(this._errorClass)}_toggleButtonState(e){this._hasInvalidInput(e)?this.disableButton():this._enableButton()}disableButton(){this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0}_enableButton(){this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1}_hasInvalidInput(e){return!e.every((e=>e.validity.valid))}_showInputError(e,t){const s=this._formElement.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),s.textContent=e.validationMessage,s.classList.add(this._errorClass)}_hideInputError(e){const t=this._formElement.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t.textContent=" ",t.classList.remove(this._errorClass)}enableValidation(){this._formElement.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}}class s{constructor(e){let{popUpSelector:t}=e;this._popUpElement=document.querySelector(t),this._handleEscClose=this._handleEscClose.bind(this)}open(){this._popUpElement.classList.add("modal_open"),document.addEventListener("keydown",this._handleEscClose)}close(){this._popUpElement.classList.remove("modal_open"),document.removeEventListener("keydown",this._handleEscClose)}_handleEscClose(e){"Escape"===e.key&&this.close()}_handleOverlay(e){e.target.classList.contains("modal_open")&&this.close()}setEventListeners(){this._closeButton=this._popUpElement.querySelector(".modal__close"),this._closeButton.addEventListener("click",(()=>{this.close()})),this._popUpElement.addEventListener("click",(e=>{this._handleOverlay(e)}))}}class r extends s{constructor(e,t){super({popUpSelector:e}),this._popUpForm=this._popUpElement.querySelector(".modal__form"),this._handleFormSubmit=t,this._inputEls=Array.from(this._popUpForm.querySelectorAll(".modal__input")),this._submitBtn=this._popUpForm.querySelector(".modal__button")}close(){this._popUpForm.reset(),super.close()}_getInputValues(){const e={};return this._inputEls.forEach((t=>{e[t.name]=t.value})),e}renderLoading(e){this._submitBtn.textContent=e?"Saving...":"Save"}setEventListeners(){super.setEventListeners(),this._popUpForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())}))}}class n{constructor(e,t){let{items:s,renderer:r}=e;this._items=s,this._renderer=r,this._container=document.querySelector(t)}renderItems(e,t){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}const i={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible"},o=document.querySelector("#edit-modal"),a=document.querySelector("#add-card-modal"),l=document.forms.profile__form,c=a.querySelector(".modal__form"),d=document.forms.avatar__form,h=(document.forms["modal__delete-form"].querySelector(".modal-delete-button"),document.querySelector("#profile-edit-button")),_=(o.querySelector(".modal__close"),a.querySelector(".modal__close"),document.querySelector(".profile__add-button")),u=document.querySelector(".profile__avatar-button"),m=(document.querySelector(".card__delete-button"),c.querySelector("#card-name-input"),c.querySelector("#card-link-input"),d.querySelector("#avatar-link-input"),new class{constructor(e){let{headers:t,baseUrl:s}=e;this._headers=t,this._baseUrl=s}_checkResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}getUserInfo(){return fetch(`${this._baseUrl}/users/me`,{headers:this._headers}).then(this._checkResponse)}createCard(e,t){return fetch(`${this._baseUrl}/cards`,{method:"POST",headers:this._headers,body:JSON.stringify({name:e,link:t})}).then(this._checkResponse)}updateUserInfo(e,t){return fetch(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e,about:t})}).then(this._checkResponse)}updateUserAvatar(e){return fetch(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})}).then(this._checkResponse)}getInitialCards(){return fetch(`${this._baseUrl}/cards`,{headers:this._headers}).then(this._checkResponse)}deleteCard(e){return fetch(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers}).then(this._checkResponse).then((()=>console.log("Card has been deleted")))}likeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers}).then(this._checkResponse).then((()=>console.log("Card has been liked")))}dislikeCard(e){return fetch(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers}).then(this._checkResponse).then((()=>console.log("Card has been disliked")))}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"298dccb5-56b1-425a-ba81-960441ee84bf","Content-Type":"application/json"}})),p=new r("#edit-avatar-modal",(function(e){p.renderLoading(!0),m.updateUserAvatar(e.link).then((e=>{B.setUserAvatar(e.avatar)})).then((()=>{console.log("Avatar has been updated"),v.disableButton(),p.close()})).catch((e=>{console.error(e)})).finally((()=>{p.renderLoading(!1)}))}));p.setEventListeners();const E=new t(i,l),b=new t(i,c),v=new t(i,d);function k(t){return new e(t,"#card-template",U,x,A).getView()}E.enableValidation(),b.enableValidation(),E.disableButton(),b.disableButton(),v.enableValidation(),v.disableButton();const f=document.querySelector(".profile__name"),L=document.querySelector(".profile__description"),S=document.querySelector(".profile__image"),C=document.querySelector("#profile-name-input"),y=document.querySelector("#profile-description-input");h.addEventListener("click",(()=>{I.open();const e=B.getUserInfo();C.value=e.name,y.value=e.job})),_.addEventListener("click",(()=>{q.open()}));const g=new class extends s{constructor(e){super({popUpSelector:e}),this._popUpImage=this._popUpElement.querySelector(".modal__image"),this._popUpCaption=this._popUpElement.querySelector(".modal__caption")}open(e,t){this._popUpImage.src=t,this._popUpImage.alt=e,this._popUpCaption.textContent=e,super.open()}}("#card-image-modal");function U(e,t){return g.open(e,t)}g.setEventListeners();const I=new r("#edit-modal",(function(e){I.renderLoading(!0),m.updateUserInfo(e.name,e.link).then((()=>{B.setUserInfo(e.name,e.link)})).then((()=>{E.disableButton(),I.close()})).catch((e=>{console.log(e)})).finally((()=>{I.renderLoading(!1)}))})),q=new r("#add-card-modal",(function(e){q.renderLoading(!0),m.createCard(e.name,e.link).then((e=>{const t=k(e);w.addItem(t),q.close(),b.disableButton()})).catch((e=>{console.error(`The error is ${e}`)})).finally((()=>{q.renderLoading(!1)}))}));I.setEventListeners(),q.setEventListeners();const B=new class{constructor(e,t,s){this._userName=e,this._userJob=t,this._userAvatar=s}getUserInfo(){return{name:this._userName.textContent,job:this._userJob.textContent,avatar:this._userAvatar.src}}setUserInfo(e,t){this._userName.textContent=e,this._userJob.textContent=t}setUserAvatar(e){this._userAvatar.src=e}}(f,L,S);let w;m.getInitialCards().then((e=>{w=new n({items:e,renderer:e=>{const t=k(e);w.addItem(t)}},".cards__list"),w.renderItems()})).catch((e=>{console.error(e)})),m.getUserInfo().then((e=>{B.setUserInfo(e.name,e.about),B.setUserAvatar(e.avatar)})).catch((e=>{console.error(e)}));const $=new class extends s{constructor(e){super({popUpSelector:e}),this._popUpForm=this._popUpElement.querySelector(".modal__form")}handleDelete(e){this._handleDeleteSubmit=e}setEventListeners(){super.setEventListeners(),this._popUpForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleDeleteSubmit()}))}}("#delete-card-modal");function A(e){console.log(e),e.isLiked&&m.dislikeCard(e._id).then((()=>{e.handleLikeIcon(),e.isLiked=!1})).catch((e=>{console.error(e)})),e.isLiked||m.likeCard(e._id).then((()=>{e.handleLikeIcon(),e.isLiked=!0})).catch((e=>{console.error(e)}))}function x(e){$.open(),console.log(e._id),$.handleDelete((()=>{m.deleteCard(e._id).then((()=>{e.handleDeleteCard(),$.close()})).catch((e=>{console.error(e)}))}))}$.setEventListeners(),u.addEventListener("click",(()=>{p.open()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,